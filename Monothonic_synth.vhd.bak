-- Copyright (C) 2020  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- PROGRAM		"Quartus Prime"
-- VERSION		"Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"
-- CREATED		"Tue Mar 08 14:00:08 2022"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY Monothonic_synth IS 
	PORT
	(
		clk :  IN  STD_LOGIC;
		C :  IN  STD_LOGIC;
		D :  IN  STD_LOGIC;
		E :  IN  STD_LOGIC;
		F :  IN  STD_LOGIC;
		G :  IN  STD_LOGIC;
		en :  IN  STD_LOGIC;
		A :  IN  STD_LOGIC;
		B :  IN  STD_LOGIC;
		speed_up :  IN  STD_LOGIC;
		speed_down :  IN  STD_LOGIC;
		nrst :  IN  STD_LOGIC;
		sequence_enab :  IN  STD_LOGIC_VECTOR(1 DOWNTO 0);
		speaker :  OUT  STD_LOGIC;
		note :  OUT  STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END Monothonic_synth;

ARCHITECTURE bdf_type OF Monothonic_synth IS 

COMPONENT set_bpm
	PORT(speed_up : IN STD_LOGIC;
		 speed_down : IN STD_LOGIC;
		 BPM : OUT STD_LOGIC_VECTOR(25 DOWNTO 0)
	);
END COMPONENT;

COMPONENT sequencer
	PORT(clk : IN STD_LOGIC;
		 nrst : IN STD_LOGIC;
		 BPM : IN STD_LOGIC_VECTOR(25 DOWNTO 0);
		 input : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
		 sequence_enab : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
		 note : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END COMPONENT;

COMPONENT squarewave
	PORT(clk : IN STD_LOGIC;
		 en : IN STD_LOGIC;
		 note : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
		 speaker : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT keyboard
	PORT(C : IN STD_LOGIC;
		 D : IN STD_LOGIC;
		 E : IN STD_LOGIC;
		 F : IN STD_LOGIC;
		 G : IN STD_LOGIC;
		 A : IN STD_LOGIC;
		 B : IN STD_LOGIC;
		 input : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
	);
END COMPONENT;

SIGNAL	input :  STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL	note_ALTERA_SYNTHESIZED :  STD_LOGIC_VECTOR(6 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_0 :  STD_LOGIC_VECTOR(25 DOWNTO 0);


BEGIN 



b2v_inst : set_bpm
PORT MAP(speed_up => speed_up,
		 speed_down => speed_down,
		 BPM => SYNTHESIZED_WIRE_0);


b2v_inst1 : sequencer
PORT MAP(clk => clk,
		 nrst => nrst,
		 BPM => SYNTHESIZED_WIRE_0,
		 input => input,
		 sequence_enab => sequence_enab,
		 note => note_ALTERA_SYNTHESIZED);


b2v_inst2 : squarewave
PORT MAP(clk => clk,
		 en => en,
		 note => note_ALTERA_SYNTHESIZED,
		 speaker => speaker);


b2v_inst3 : keyboard
PORT MAP(C => C,
		 D => D,
		 E => E,
		 F => F,
		 G => G,
		 A => A,
		 B => B,
		 input => input);

note <= note_ALTERA_SYNTHESIZED;

END bdf_type;